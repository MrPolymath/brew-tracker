generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AromaFamily {
  id     String  @id @default(cuid())
  name   String  @unique
  color  String
  aromas Aroma[]
}

model Aroma {
  id            String      @id @default(cuid())
  name          String      @unique
  color         String
  aromaFamilyId String
  aromaFamily   AromaFamily @relation(references: [id], fields: [aromaFamilyId])
  brews         Brew[]
}

model FlavourFamily {
  id      String    @id @default(cuid())
  name    String    @unique
  color   String
  flavour Flavour[]
}

model Flavour {
  id              String        @id @default(cuid())
  name            String        @unique
  color           String
  flavourFamilyId String
  brewId          String
  flavourFamily   FlavourFamily @relation(references: [id], fields: [flavourFamilyId])
  brews           Brew          @relation(references: [id], fields: [brewId])
}

model BrewMethod {
  id    String @id @default("aeropress")
  name  String
  image String
  brews Brew[]
}

model Coffee {
  id         String   @id @default(cuid())
  name       String
  roastDate  DateTime @default(now())
  origin     String
  process    String
  roaster    String
  variety    String
  producer   String
  screenSize String
  brews      Brew[]
  User       User?    @relation(fields: [userId], references: [id])
  userId     Int?
}

model Brew {
  id             String      @id @default(cuid())
  createdAt      DateTime    @default(now())
  cups           Int         @default(1)
  waterTemp      Int         @default(95)
  grindSize      Int         @default(30)
  coffeeQuantity Int         @default(20)
  waterQuantity  Int         @default(100)
  isFavorite     Boolean     @default(false)
  smellIntensity Int         @default(5)
  smellQuality   Int         @default(5)
  acidity        Int         @default(5)
  sweetness      Int         @default(5)
  bitterness     Int         @default(5)
  body           Int         @default(5)
  finish         String?
  score          Int         @default(5)
  time           Int         @default(5)
  flavours       Flavour[]
  aromas         Aroma[]
  BrewMethod     BrewMethod? @relation(fields: [brewMethodId], references: [id])
  brewMethodId   String?
  Coffee         Coffee?     @relation(fields: [coffeeId], references: [id])
  coffeeId       String?
  steps          BrewStep[]
  User           User?       @relation(fields: [userId], references: [id])
  userId         Int?
}

model BrewStep {
  id          String  @id @default(cuid())
  name        String
  stepNumber  Int
  time        Int
  description String?
  Brew        Brew    @relation(fields: [brewId], references: [id])
  brewId      String
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  brews         Brew[]
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  coffees       Coffee[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
